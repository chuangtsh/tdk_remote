name: 'tdkkesler'

# Common environment for services
x-common-env: &common-env
  tty: true
  stdin_open: true
  stop_grace_period: 1s

services:
  ros-core:
    profiles: ['communication']
    image: osrf/ros:noetic-desktop-full
    container_name: kesler-ros-core-x1
    command: "rosmaster --core"
    network_mode: host
    stop_grace_period: 1s
    healthcheck:
      test: /ros_entrypoint.sh bash -c "rostopic list || exit 1"
      interval: 3s
      timeout: 10s
      retries: 5

  ros1-bridge:
    profiles: ['communication']
    build:
      context: .
      dockerfile: dockerfile.commun
      target: release
    image: comm-tdk-x1:bridge
    container_name: kesler-ros2-ros1-bridge-x1
    environment:
      - RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
      - ROS_DOMAIN_ID=24
    stop_grace_period: 1s
    depends_on:
      ros-core:
        condition: service_healthy
    stdin_open: true
    tty: true
    network_mode: host
    working_dir: /
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /dev/dri:/dev/dri
      - /dev/shm:/dev/shm
    command: >
      bash -c "export ROS_MASTER_URI=http://localhost:11311 &&
               source /ros2_humble/install/setup.bash &&
               source /ros2_humble/install/ros1_bridge/share/ros1_bridge/local_setup.bash &&
               ros2 run ros1_bridge dynamic_bridge --bridge-all-topics --ros-args --remap __node:=kesler_ros_bridge"

  ros1:
    profiles: ['communication']
    image: osrf/ros:noetic-desktop-full
    container_name: kesler-ros1-x1
    stdin_open: true
    tty: true
    network_mode: host
    privileged: true
    volumes:
      - ../comm-ws:/root/comm-ws
      - /dev/bus/usb:/dev/bus/usb
    stop_grace_period: 1s
    depends_on:
      ros-core:
        condition: service_healthy
    command: >
      /bin/bash -c "
      source /opt/ros/noetic/setup.bash && 
      source /root/comm-ws/devel/setup.bash && 
      cd /root/comm-ws &&
      echo 'Waiting for TTY device...' &&
      while [ ! -e /dev/ttyACM0 ]; do
        echo 'TTY device /dev/ttyACM0 not found, waiting...'
        sleep 2
      done &&
      echo 'TTY device found, setting permissions...' &&
      sudo chmod 777 /dev/ttyACM0 &&
      echo 'Launching rosserial server...' &&
      roslaunch rosserial_server stm32.launch
      "

  ros2:
    profiles: ['communication', 'camera']
    build:
      context: .
      dockerfile: dockerfile.camera
      target: opencv
      args:
        USER: opencv
    <<: *common-env
    image: vision-tdk-x1:ros2
    container_name: kesler-ros2-x1
    network_mode: host
    stop_grace_period: 1s
    environment:
      - RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
      - ROS_DOMAIN_ID=24
      - DISPLAY=${DISPLAY:-:0}
      - QT_X11_NO_MITSHM=1
      - XAUTHORITY=/tmp/.X11-unix/Xauthority
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /tmp/.X11-unix:/tmp/.X11-unix:rw      
      - ${XAUTHORITY:-${HOME}/.Xauthority}:/tmp/.X11-unix/Xauthority:rw
      - /dev/shm:/dev/shm
      - $PWD/../packages/ros2-pkg:/home/opencv/vision-ws/src/opencv_ros
    command: /bin/bash -c "source /opt/ros/humble/setup.bash && echo 'source /opt/ros/humble/setup.bash' >> ~/.bashrc && bash"

# camera service
  realsense: 
    profiles: ['camera']
    build:
      context: .
      target: realsense  
      dockerfile: dockerfile.camera
      args:
        USER: realsense
        LIBREALSENSE_VERSION: 2.56.2
    <<: *common-env
    network_mode: host
    image: vision-tdk-x1:realsense
    container_name: kesler-realsense-x1
    volumes:
      - /dev:/dev
      - $PWD/../packages/realsense-pkg:/home/realsense/vision-ws/src/realsense-ros
    environment:
      - RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
      - ROS_DOMAIN_ID=24
    device_cgroup_rules:
      - "c 81:* rmw"
      - "c 189:* rmw"
    command: bash -ic "colcon build && source install/setup.bash && ros2 launch realsense2_camera rs_multi_camera_launch.py"